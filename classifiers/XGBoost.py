from sklearn.model_selection import GridSearchCV
import xgboost as xgb
import logging
from sklearn.preprocessing import LabelEncoder
from helpers.utils import check_path
import os

logger = logging.getLogger(__name__)


class XGBoostModel:
    def __init__(self, config):
        """
        Init XGBoost model, load saved model from local path if do_training = False
        :param config: configuration object
        """
        self.config = config
        self.model = xgb.XGBClassifier()
        self.model_path = os.path.join(
            self.config.get('output_dir'),
            self.config.get('model_name')
        )
        check_path(self.model_path)
        if self.config.get('do_training'):
            logger.info('Initializing XGBoost model with config')
            self.n_estims = None

            parameters = {
                "n_estimators": self.config.get('n_estimators'),
                "eta": self.config.get('eta'),
                "max_depth": self.config.get('max_depth'),
                "learning_rate": self.config.get('learning_rate'),
                "min_child_weight": self.config.get('min_child_weight'),
                "gamma": self.config.get('gamma'),
                'colsample_bytree': self.config.get('colsample_bytree'),
            }

            self.grid = GridSearchCV(self.model,
                            parameters, n_jobs=self.config.get('n_jobs'),
                            scoring=self.config.get('scoring'),
                            cv=self.config.get('cv'))

        else:
            logger.info('Loading saved XGBoost model ' + self.model_path)
            booster = xgb.Booster()
            booster.load_model(os.path.join(self.model_path, self.config.get('model_name') + '.xgboost' + '.json'))
            self.model._Booster = booster
            self.model._le = LabelEncoder().fit([0, 1])
            self.n_estims = self.config.get('n_estimators')[0]
        self.config.print()

    def train(self, x_train, y_train, save_model=False):
        """
        Train XGBoost model with Grid Search Cross Validation, find the best model and save it
        :param x_train: train reports dataset
        :param y_train: list of labels for train reports dataset
        :param save_model: mark whether save model after training
        """
        logger.info('    Training XGBoost')
        self.grid.fit(x_train, y_train,
                      #{'enable_experimental_json_serialization': True}
                      )

        best_parameters = self.grid.best_params_
        logger.info('Printing best found parameters: {}'.format(best_parameters))
        self.n_estims = best_parameters['n_estimators']
        self.model = self.grid.best_estimator_

        if save_model:
            logger.info('Saving XGBoost model to ' + self.model_path)
            self.model.save_model(os.path.join(self.model_path, self.config.get('model_name') + '.xgboost' + '.json'))

    def predict(self, x, dataset_name):
        """
        Predict dataset using trained model
        :param x: dataset of reports
        :param dataset_name: name of dataset, for logging purposes
        :return: prediction
        """
        logger.info('    XGBoost predict on ' + dataset_name)
        return self.model.predict(x, ntree_limit=self.n_estims)
