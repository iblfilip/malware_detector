from sklearn.model_selection import GridSearchCV
import xgboost as xgb
from helpers.evaluation import print_results
from helpers.utils import save, load
import logging

logger = logging.getLogger(__name__)


class XGBoostModel:
    def __init__(self, config):
        self.config = config
        self.model = xgb.XGBClassifier()
        self.model_path = self.config.get('output_dir') + self.config.get('model_name') + '.xgboost'
        if self.config.get('do_training'):
            logger.info('Initializing XGBoost model with config')
            self.config.print()
            self.n_estims = None

            parameters = {
                "n_estimators": self.config.get('n_estimators'),
                "eta": self.config.get('eta'),
                "max_depth": self.config.get('max_depth'),
                "learning_rate": self.config.get('learning_rate'),
                "min_child_weight": self.config.get('min_child_weight'),
                "gamma": self.config.get('gamma'),
                'colsample_bytree': self.config.get('colsample_bytree'),
            }

            self.grid = GridSearchCV(self.model,
                            parameters, n_jobs=self.config.get('n_jobs'),
                            scoring=self.config.get('scoring'),
                            cv=self.config.get('cv'))

        else:
            logger.info('Loading saved XGBoost model ' + self.model_path)
            self.model = load(self.model_path)
            self.n_estims = self.config.get('n_estimators')[0]

    def train(self, X_train, y_train, save_model=False):
        logger.info('    Training XGBoost')
        self.grid.fit(X_train, y_train)

        best_parameters = self.grid.best_params_
        logger.info('Printing best found parameters: {}'.format(best_parameters))
        self.n_estims = best_parameters['n_estimators']
        self.model = self.grid.best_estimator_

        if save_model:
            logger.info('Saving XGBoost model to ' + self.model_path)
            save(self.model_path, self.model)
            #self.model.save_model(self.model_path)

    def predict(self, X, y, dataset_name):
        logger.info('    XGBoost predict on ' + dataset_name + ' dataset')
        preds = self.model.predict(X, ntree_limit=self.n_estims)
        print_results(preds, y)
