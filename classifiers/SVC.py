from sklearn.svm import SVC
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from helpers.evaluation import print_results
from helpers.utils import save, load
import logging

logger = logging.getLogger(__name__)


class SVCModel:
    def __init__(self, config):
        self.config = config
        self.model_path = self.config.get('output_dir') + self.config.get('model_name') + '.svc'
        if self.config.get('do_training'):
            logger.info('Initializing SVC model with config')
            self.config.print()
            model = SVC(
                gamma=self.config.get('gamma'),
                kernel=self.config.get('kernel'),
                random_state=self.config.get('random_value')
            ),
            self.classifier = make_pipeline(StandardScaler(), model[0])
        else:
            logger.info('Loading SVC model from ' + self.model_path)
            self.classifier = load(self.model_path)

    def train(self, X_train, y_train, save_model=False):
        logger.info('    Training SVC')
        self.classifier.fit(X_train, y_train)

        if save_model:
            logger.info('Saving SVC model to ' + self.model_path)
            save(self.model_path, self.classifier)

    def predict(self, X_test, y_test, dataset_name):
        logger.info('    SVC predict on ' + dataset_name + ' dataset')
        preds_test = self.classifier.predict(X_test)
        print_results(preds_test, y_test)
