import seaborn as sns
import matplotlib.pyplot as plt
from helpers.utils import load_dataset
import pickle


def plot_reports_length():
    reports, labels = load_dataset('reports_')
    malware_lengths = [len(report) for report, label in zip(reports, labels) if label == 1]
    benign_lengths = [len(report) for report, label in zip(reports, labels) if label == 0]
    malwares_mean = sum(malware_lengths) / len(malware_lengths)
    benign_mean = sum(benign_lengths) / len(benign_lengths)

    mean = [503, 1455]
    sns.set(style="darkgrid")
    fig, ax = plt.subplots()
    sns.barplot(x=['malware', 'beningware'], y=mean, ax=ax, palette=["C1", "C0"])
    ax.set(ylabel='Average number of characters (in thousands)', xlabel='Class')
    plt.show()


def plot_tokens_length(malware_length, beningware_length):
    malwares_mean = sum(malware_length) / len(malware_length)
    benign_mean = sum(beningware_length) / len(beningware_length)

    sns.set(style="darkgrid")
    fig, ax = plt.subplots()
    sns.barplot(x=['malware', 'benign'], y=[malwares_mean, benign_mean], ax=ax, palette=["C1", "C0"])
    ax.set(ylabel='Average number of WordPiece tokens', xlabel='Class')
    plt.show()


def histogram_tokens_length(malware_length, beningware_length):
    threshold = 800000
    ben_lengths = [min(l, threshold) for l in beningware_length]
    mal_lengths = [min(l, threshold) for l in malware_length]

    fig, ax = plt.subplots()
    sns.set(style="darkgrid")
    sns.distplot(ben_lengths, bins=range(1, threshold, 50000), kde=False, rug=False, ax=ax, label='benign')
    sns.distplot(mal_lengths, bins=range(1, threshold, 50000), kde=False, rug=False, ax=ax, label='malware')

    ax.legend()
    plt.title('Reports length distribution')
    plt.xlabel('Report length')
    plt.ylabel('Number of reports')
    plt.show()


def plot_wordpiece_tokens_statistics():
    # reports, labels = load_dataset('reports_')
    # tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)
    # malware_length = []
    # beningware_length = []
    # for i_report, (report, label) in enumerate(zip(reports, labels)):
    #     tokenized_report = tokenizer.tokenize(report)
    #     print('batching report {}, len {}'.format(i_report, len(tokenized_report)))
    #     if label == 0:
    #         beningware_length.append(len(tokenized_report))
    #     else:
    #         malware_length.append(len(tokenized_report))
    #
    # print('neco')
    #
    # pickle.dump(beningware_length, open("wordpiece_stats/beningware_length.p", "wb"))
    # pickle.dump(malware_length, open("wordpiece_stats/malware_length.p", "wb"))
    #
    # exit()

    malware_length = pickle.load(open("../wordpiece_stats/malware_length.p", "rb"))
    beningware_length = pickle.load(open("../wordpiece_stats/beningware_length.p", "rb"))

    plot_tokens_length(malware_length, beningware_length)
    histogram_tokens_length(malware_length, beningware_length)


def show_report_length(reports, labels):
    lengths = []
    malware_longer_than_thresh = 0
    threshold = 70000
    for train_report, train_label in zip(reports, labels):
        # encoded_report = tokenizer.encode(
        #     train_report,
        #     add_special_tokens=True
        # )
        lengths.append(len(train_report))
        if len(train_report) > threshold and train_label == 1:
            malware_longer_than_thresh += 1


    print('min length {}'.format(min(lengths)))
    print('max length {}'.format(max(lengths)))
    print('median length {}'.format(np.median(lengths)))

    # truncate reports longer than
    lengths = [min(l, 100000) for l in lengths]

    sns.distplot(lengths, kde=False, rug=False)

    plt.title('Reports length')
    plt.xlabel('Report length')
    plt.ylabel('Number of reports')
    plt.show()

    print('Malware percentage longer than threshold {} is {}'.format(threshold, (malware_longer_than_thresh/len(reports)) * 100))


def show_tokens_length(lengths, threshold):
    reports_longer_than_thresh = 0
    for l in lengths:
        if l > threshold:
            reports_longer_than_thresh += 1
    print('min length {}'.format(min(lengths)))
    print('max length {}'.format(max(lengths)))
    print('median length {}'.format(np.median(lengths)))

    # truncate reports longer than
    lengths = [min(l, threshold) for l in lengths]

    sns.distplot(lengths, kde=False, rug=False)

    plt.title('Reports length')
    plt.xlabel('Report length')
    plt.ylabel('Number of reports')
    plt.show()

    print('Malware percentage longer than threshold {} is {}'.format(threshold,
                                                                     (reports_longer_than_thresh / len(lengths)) * 100))


def plot_loss(loss_values):
    sns.set(style='darkgrid')
    sns.set(font_scale=1.5)
    plt.rcParams['figure.figsize'] = (12, 6)

    plt.plot(loss_values, 'b-o')

    plt.title('Training loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.show()
