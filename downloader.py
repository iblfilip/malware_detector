import json
import os
import spacy
import numpy as np
from helpers.utils import clean_report

nlp = spacy.load("en_core_web_sm")

index = 'android'

path = '/Users/filipibl/Documents/Southampton/Project/CuckooDroid/reports_generated'


def save_to_elastic():
    filesDir = get_files_names()
    for directory, familiesDir in filesDir.items():
        print('Processing {}'.format(directory))
        if directory == 'Benign2017' or directory == 'Benign2015':
            process_and_save_reports(directory, familiesDir, 'beningware')
        else:
            process_and_save_reports(directory, familiesDir, 'malware')


def save_as_json(*attrs):
    print('Saving reports with attributes {}'.format(attrs))
    reports = load_reports(*attrs)
    file_name = 'datasets/' + 'reports_' + '_'.join(attrs) + '.json'
    print('Saving report name {}'.format(file_name))
    reports = reports.tolist()
    with open(file_name, 'w') as outfile:
        json.dump(reports, outfile)


def calculate_parts_length(keys):
    part_lengths_malware = {}
    part_lengths_benign = {}
    for key in keys:
        part_lengths_malware[key] = 0
        part_lengths_benign[key] = 0
    n_files = 0
    n_malws = 0
    n_benign = 0

    filesDir = get_files_names()
    for directory, familiesDir in filesDir.items():
        for family, filesList in familiesDir.items():
            for file_name in filesList:
                filePath = path + '/' + directory + '/' + family + '/' + file_name
                if directory == 'Benign2017' or directory == 'Benign2015':
                    report = extract_file(filePath, family, 'beningware', [])
                else:
                    report = extract_file(filePath, family, 'malware', [])
                for attr in report['report'].keys():
                    part = json.dumps(report['report'][attr])
                    p_length = len(part)
                    if report['label'] == 'malware':
                        part_lengths_malware[attr] += p_length
                    if report['label'] == 'beningware':
                        part_lengths_benign[attr] += p_length
                print('calculating report {}'.format(filePath))
                n_files += 1
                if report['label'] == 'malware':
                    n_malws += 1
                if report['label'] == 'beningware':
                    n_benign += 1

    for key in keys:
        part_lengths_malware[key] = part_lengths_malware[key] / n_files
        part_lengths_benign[key] = part_lengths_benign[key] / n_files

    total_array = []
    for benign, mal in zip(part_lengths_benign.items(), part_lengths_malware.items()):
        total_array.append(['malware', mal[0], mal[1]])
        total_array.append(['benign', benign[0], benign[1]])

    np_total_array = np.array(total_array)
    return np_total_array


def load_reports(*attrs):
    filesDir = get_files_names()
    reports = np.array([])
    for directory, familiesDir in filesDir.items():
        #print('Processing {}'.format(directory))
        if directory == 'Benign2017' or directory == 'Benign2015':
            reps = proceess_reports(directory, familiesDir, 'beningware', attrs)
            reports = np.append(reps, reports)
        else:
            reps = proceess_reports(directory, familiesDir, 'malware', attrs)
            reports = np.append(reps, reports)
    return reports


def process_and_save_reports(directory, familiesDir, file_type):
    for family, filesList in familiesDir.items():
        for file_name in filesList:
            filePath = path + '/' + directory + '/' + family + '/' + file_name
            report = extract_file(filePath, family, file_type)
            report['report'] = clean_report(report['report'])
            save_report(report, file_name)


def proceess_reports(directory, familiesDir, file_type, attrs):
    reports = []
    for family, filesList in familiesDir.items():
        for file_name in filesList:
            filePath = path + '/' + directory + '/' + family + '/' + file_name
            report = extract_file(filePath, family, file_type, attrs)
            report['report'] = clean_report(report['report'])
            reports.append(report)
    return reports


def get_files_names():
    listOfDirs = os.listdir(path)
    filesDir = {}
    for directory in listOfDirs:
        if (directory != '.DS_Store'):
            listOfSubdirs = os.listdir(path + '/' + directory + '/')
            filesDir[directory] = {}

            for subdir in listOfSubdirs:
                if (subdir != '.DS_Store'):
                    listOfFiles = os.listdir(path + '/' + directory + '/' + subdir + '/')
                    if '.DS_Store' in listOfFiles:
                        listOfFiles.remove('.DS_Store')
                    filesDir[directory][subdir] = listOfFiles
    return filesDir


def save_report(data, file_name):
    res = es.index(index=index, body=data)
    # print('report saved ' + data['name'] + " " + ' ' + file_name)


def extract_file(file_path, family, file_type, attrs):
    #print(file_path)
    REPORT_DIR = '/reports/report.json'
    with open(file_path + REPORT_DIR) as file:
        data = json.load(file)

    parsed_data = {}
    parsed_data['analyzed_datetime'] = data['info']['ended']
    parsed_data['name'] = data['target']['file']['name']
    parsed_data['label'] = file_type
    if file_type == 'malware':
        parsed_data['family'] = family

    report = {}

    #report['apkinfo'] = {}
    #report['apkinfo']['manifest'] = data['apkinfo']['manifest']

    if not attrs:
        report['network'] = data['network']
        report['procmemory'] = data['procmemory']
        report['droidmon'] = data['droidmon']
        # report['signatures'] = data['signatures'] # - contains classification info
        report['static'] = data['static']
        report['apkinfo'] = data['apkinfo']
        report['behavior'] = data['behavior']
        report['target'] = data['target']
        report['debug'] = data['debug']
        report['strings'] = data['strings']
        report['dropped'] = data['dropped']

    for attr in attrs:
        if '.' in attr:
            attr = attr.split('.')

        if type(attr) is list:
            report[attr[0]] = {}
            if attr[1] in data[attr[0]]:
                report[attr[0]][attr[1]] = data[attr[0]][attr[1]]
        else:
            report[attr] = data[attr]

    parsed_data['report'] = report
    return parsed_data



    exit()

    parsed_data = {}
    parsed_data['analyzed_datetime'] = data['info']['ended']

    # Parse network
    network = {}
    parse_dictionary('udp', ['src', 'dst'], network, data['network'])
    parse_dictionary('http', ['uri', 'path'], network, data['network'])
    parse_dictionary('smtp', ['src', 'dst'], network, data['network'])
    parse_dictionary('irc', ['src', 'dst'], network, data['network'])
    parse_dictionary('tcp', ['src', 'dst'], network, data['network'])
    network['hosts'] = data['network']['hosts']
    network['dns'] = data['network']['dns']
    network['domains'] = data['network']['domains']
    parsed_data['network'] = network

    # Parse droidmon
    dynamic = {}
    dynamic['system_properties'] = data['droidmon']['SystemProperties']
    dynamic['reflection_calls'] = data['droidmon']['reflection_calls']
    dynamic['api'] = [k for k in data['droidmon']['api'].keys()]
    dynamic['sms'] = data['droidmon']['sms']
    dynamic['crypto_keys'] = data['droidmon']['crypto_keys']
    dynamic['reflected_api'] = [k for k in data['droidmon']['reflected_api'].keys()]
    parsed_data['dynamic'] = dynamic

    # Parse signatures
    signatures = []
    parse_signature(signatures, data['signatures'])
    parsed_data['signatures'] = signatures

    # Parse apkinfo
    apk_info = {}

    manifest = {}
    manifest['activities'] = data['apkinfo']['manifest']['activities']
    manifest['main_activity'] = data['apkinfo']['manifest']['main_activity']
    manifest['receivers'] = data['apkinfo']['manifest']['receivers']
    manifest['package'] = data['apkinfo']['manifest']['package']
    manifest['libraries'] = data['apkinfo']['manifest']['libraries']
    manifest['receivers_actions'] = data['apkinfo']['manifest']['receivers_actions']

    manifest['services'] = data['apkinfo']['manifest']['services']
    manifest['permissions'] = [{'action': v['action'], 'name': v['name'], 'severity': v['severity']} for v in
                               data['apkinfo']['manifest']['permissions']]

    apk_info['manifest'] = manifest
    parsed_data['apk_info'] = apk_info



def parse_signature(signatures, data_signatures):
    for s in data_signatures:
        d = {}
        d['description'] = s['description']
        d['severity'] = s['severity']
        d['data'] = []
        if s['data']:
            for data in s['data']:
                for sign in data['signs']:
                    d['data'].append(sign['type'])
        signatures.append(d)


def parse_dictionary(network_name, keys_to_save, network_saved, network):
    parsed_list = []
    for b in network[network_name]:
        parsed_dict = {}
        for k, v in b.items():
            if k in keys_to_save:
                parsed_dict[k] = v
        parsed_list.append(parsed_dict)
    network_saved[network_name] = parsed_list


#save_to_elastic()
#save_as_json()
