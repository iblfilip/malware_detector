import json
import os
import numpy as np
from helpers.utils import clean_report
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def save_as_json(*attrs):
    """
    Process reports from input_path, clean them and resave to JSON file
    input path needs to contain two subdirectories - benign (for beningware) and malware (for malware samples)
    :param attrs: report's attributes to keep in dataset, if not specified, all attributes are used
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    output_name = 'reports_' + '_'.join(attrs) if attrs else 'reports'
    file_name = os.path.join(output_dir, output_name + '.json')

    logger.info('Loading reports with required attributes {}'.format(attrs) if len(attrs) else 'Loading reports with all attributes')
    reports = load_reports(*attrs, path=input_dir, benign_dir_names = benign_dirs)
    logger.info('Saving report to {}'.format(file_name))
    reports = reports.tolist()
    with open(file_name, 'w') as outfile:
        json.dump(reports, outfile)


def load_reports(*attrs, path, benign_dir_names):
    filesDir = get_files_names(path)
    reports = np.array([])
    for directory, familiesDir in filesDir.items():
        if directory in benign_dir_names:
            label = 'beningware'
        else:
            label = 'malware'
        logger.info('Processing {} from {} directory'.format(label, directory))
        reps = process_reports(directory, familiesDir, label, attrs, path)
        reports = np.append(reps, reports)
    return reports


def process_reports(directory, families_dir, label, attrs, input_path):
    reports = []
    for family, filesList in families_dir.items():
        for file_name in filesList:
            file_path = os.path.join(input_path, directory, family, file_name, '')
            report = extract_file(file_path, family, label, attrs)
            report['report'] = clean_report(report['report'])
            reports.append(report)
    return reports


def get_files_names(path):
    dirs = os.listdir(path)
    files_dir = {}
    for directory in dirs:
        if not directory.startswith('.'):

            subdirs = os.listdir(os.path.join(path, directory))
            files_dir[directory] = {}

            for subdir in subdirs:
                if not subdir.startswith('.'):
                    file_names = os.listdir(os.path.join(path, directory, subdir))
                    if '.DS_Store' in file_names:
                        file_names.remove('.DS_Store')
                    files_dir[directory][subdir] = file_names
    return files_dir


def extract_file(file_path, family, label, attrs):
    report_dir = os.path.join('reports', 'report.json')
    with open(file_path + report_dir) as file:
        data = json.load(file)

    parsed_data = {
        'analyzed_datetime': data['info']['ended'],
        'name': data['target']['file']['name'],
        'label': label
    }
    if label == 'malware':
        parsed_data['family'] = family

    report = {}

    if not attrs:
        report['network'] = data['network']
        report['procmemory'] = data['procmemory']
        report['droidmon'] = data['droidmon']
        # report['signatures'] = data['signatures'] # - contains classification info
        # report['virustotal'] = data['virustotal'] # - contains classification info
        report['static'] = data['static']
        report['apkinfo'] = data['apkinfo']
        report['behavior'] = data['behavior']
        report['target'] = data['target']
        report['debug'] = data['debug']
        report['strings'] = data['strings']
        report['dropped'] = data['dropped']

    for attr in attrs:
        if '.' in attr:
            attr = attr.split('.')

        if type(attr) is list:
            report[attr[0]] = {}
            if attr[1] in data[attr[0]]:
                report[attr[0]][attr[1]] = data[attr[0]][attr[1]]
        else:
            report[attr] = data[attr]

    parsed_data['report'] = report
    return parsed_data


if __name__ == "__main__":
    """
    Downloader script for creating JSON dataset from directory of behavioural reports. Input directory needs to contain
    subdirectories with benign reports (specify their names in benign_dirs), other subdirs processed as containing 
    malware reports
    The final dataset is saved to /datasets directory.
    """

    # !SPECIFY PATHS!
    # path to the directory with behavioral reports
    input_dir = '/Users/filipibl/Documents/Southampton/Project/CuckooDroid/reports_generated'

    # names of subdirs containing benign reports
    benign_dirs = ['Benign2017', 'Benign2015']

    # output dir where JSON dataset will be saved
    output_dir = 'datasets'

    save_as_json(input_dir, output_dir, benign_dirs)
