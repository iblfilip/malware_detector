from gensim.models import Doc2Vec
from gensim.models.doc2vec import TaggedDocument
from nltk.tokenize import RegexpTokenizer
import multiprocessing
import numpy as np
from tqdm import tqdm
import logging

logger = logging.getLogger(__name__)

tqdm.pandas(desc="progress-bar")


class Doc2VecModel:
    def __init__(self, config):
        self.config = config
        self.model_path = self.config.get('output_dir') + self.config.get('model_name') + '.' + str(self.config.get('dm')) + '.d2v'
        self.cores = multiprocessing.cpu_count()
        self.tokenizer = RegexpTokenizer(r'\w+')

        if self.config.get('do_training'):
            self.model = Doc2Vec(
                dm=self.config.get('dm'),
                vector_size=self.config.get('vector_size'),
                window=self.config.get('window'),
                negative=self.config.get('negative'),
                hs=self.config.get('hs'),
                min_count=self.config.get('hs'),
                sample=self.config.get('sample'),
                alpha=self.config.get('alpha'),
                workers=self.cores,
                compute_loss=self.config.get('compute_loss')
            )
            logger.info('Initializing Doc2Vec model with config')
            self.config.print()

        else:
            logger.info('Loading Doc2Vec model from ' + self.model_path)
            self.model = Doc2Vec.load(self.model_path)

    def tag_dataset(self, reports, labels):
        return [TaggedDocument(self.tokenizer.tokenize(report), [label]) for label, report in zip(labels, reports)]

    def train(self, train_reports, train_labels, save_model=True):
        logger.info('Training Doc2Vec model')
        train_tagged = self.tag_dataset(train_reports, train_labels)
        self.model.build_vocab(train_tagged)
        self.model.train(
            train_tagged,
            total_examples=self.model.corpus_count,
            epochs=self.config.get('epochs'),
            start_alpha=self.config.get('start_alpha'),
            end_alpha=self.config.get('end_alpha')
        )

        if save_model:
            logger.info('Saving Doc2Vec model to ' + self.model_path)
            self.model.save(self.model_path)

    def infer_vectors(self, reports, labels):
        logger.info('Inferring vectors from Doc2Vec model')
        tagged_docs = self.tag_dataset(reports, labels)
        vecs = [self.model.infer_vector(tag.words) for tag in tagged_docs]
        vecs = np.array(vecs)
        return vecs
